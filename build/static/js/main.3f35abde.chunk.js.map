{"version":3,"sources":["utils/toast.js","components/Home/handleOrder.js","utils/orderUtil.js","components/Home/HeaderComp.js","components/Home/Widget.js","components/Home/BuySell.js","components/Home/OrderTable.js","components/Home/Home.js","components/Login/Login.js","components/Register/Register.js","App.js","index.js","utils/nameSymbol.js","utils/miscUtil.js"],"names":["ToastContainer","toast","configure","showToastSuccess","message","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","showToastError","error","showToastWarn","info","handleBuyNow","balance","holding","order","currentPrice","amount","newBalance","newHolding","_objectSpread","newBoughtHolding","coinSelectedName","concat","handleSortNow","sortedHolding","newSortedHolding","coinBought","sortedOrder","push","handleSellNow","newSellHolding","handleSellSortNow","executePrevCompletedOrders","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","allOrders","getCurrentPrice","newBalanceAfterCompletingPrevOrders","newHoldingAfterCompletingPrevOrders","newSortedHoldingAfterCompletingPrevOrders","updatedAllOrders","oldestUnfinishedOrderTime","unfinishedOrders","i","historicalDataFetchUrl","res","historicalData","index","unfinishedOrder","_iterator2","_step2","hisData","_handleBuyNow","_handleSortNow","_success","_newBalance","wrap","_context","prev","next","slice","length","orderCompleted","console","log","time","abrupt","axios","get","raxConfig","retry","retryDelay","sent","data","Date","date","getTime","t0","keys","t1","done","value","_createForOfIteratorHelper","s","n","a","b","priceWhenOrderWasPlaced","executeWhenPriceAt","Number","priceUsd","Promise","resolve","setTimeout","type","t2","e","f","finish","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","HeaderComp","_jsx","className","children","Widget","props","TradingViewWidget","symbol","convertNameToTradingviewSybmol","width","height","timezone","locale","style","theme","Themes","DARK","range","allow_symbol_change","details","studies","React","memo","modal","top","left","transform","bgcolor","color","border","boxShadow","p","list","maxWidth","borderRadius","dropList","marginTop","marginBottom","textBox","marginLeft","stack","display","justifyContent","alignItems","margin","coinlist","radioList","flexDirection","radioButton","overFlow","whiteSpace","fontSize","bgtext","tabsAlign","upMarign","BuySell","totalAssetColor","lastTotalAssetChange","_React$useState","useState","_React$useState2","_slicedToArray","coin","setCoin","_useState","_useState2","orderType","setOrderType","_useState3","_useState4","orderAmount","setOrderAmount","_useState5","_useState6","buyAtAmount","setBuyAtAmount","_useState7","_useState8","sellAtAmount","setSellAtAmount","_useState9","_useState10","sortAtAmount","setSortAtAmount","_useState11","_useState12","sellSortAtAmount","setSellSortAtAmount","_useState13","_useState14","buyopen","setBuyOpen","_useState15","_useState16","sellopen","setSellOpen","_useState17","_useState18","sortopen","setSortOpen","handleSellClose","_useState19","_useState20","selectedTab","setSelectedTab","getFormatedPrice","totalAssetAmt","digitsAfterDecimal","numberWithCommas","parseFloat","toFixed","_jsxs","FormControl","fullWidth","InputLabel","id","Select","sx","labelId","label","onChange","event","target","MenuItem","List","ListItem","ListItemAvatar","MonetizationOnRoundedIcon","ListItemText","disableTypography","primary","_Fragment","Typography","AccountBalanceWalletIcon","CottageIcon","formatedHolding","coinName","split","map","line","getFormatedHolding","formatedSortedHolding","_step","currentCoinWorth","_iterator","sortedHoldingOrder","err","getFormatedSortedHolding","onClick","Modal","open","onClose","Box","Stack","direction","spacing","RadioGroup","row","defaultValue","name","FormControlLabel","control","Radio","TextField","variant","sybmol","placeOrder","AppBar","Tabs","newValue","Tab","TablePaginationActions","classes","makeStyles","whiteIcon","count","page","rowsPerPage","onPageChange","flexShrink","ml","IconButton","disabled","FirstPageIcon","LastPageIcon","KeyboardArrowLeft","KeyboardArrowRight","Math","ceil","max","withStyles","root","overflowX","backgroundColor","table","minWidth","head","tableRow","tableCell","hover","selected","setPage","_React$useState3","_React$useState4","setRowsPerPage","rows","forEach","arrayItem","status","priceat","emptyRows","calculateGains","gain","currentWorth","calculateGainPercent","gainPercent","Paper","Table","TableHead","TableRow","TableCell","TableBody","component","scope","toLocaleString","colSpan","TableFooter","TablePagination","rowsPerPageOptions","newPage","onRowsPerPageChange","parseInt","ActionsComponent","Home","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","arraysEqual","a1","a2","objectsEqual","o1","o2","Object","every","o","idx","state","updatePrevCompletedOrders","_yield$executePrevCom","setState","_handleSellNow","_handleSellSortNow","newAllOrders","tempOrder","now","remove","localStorage","clear","lastTotalAssetChangeTimeout","userId","email","bitcoin","ethereum","dogecoin","tesla","_createClass","key","_componentDidMount","_callee2","_context2","this","quickUpdateCurrentPriceUsingApi","startUpdatingCurrentPriceUsingWebsocket","updateUserDataFromLocalStorage","prevProps","prevState","_this2","newTotalAssetAmt","getUpdatedTotalAssetAmt","clearTimeout","userData","window","setItem","JSON","stringify","updateDbFromLocalStorage","_updateUserDataFromLocalStorage","_callee3","userDataLocalStorage","_context3","parse","getItem","_updateDbFromLocalStorage","_callee4","headers","user","_context4","charset","method","withCredentials","url","config","then","response","price","rateUsd","updatedCurrentPrice","bind","catch","WebSocket","onmessage","msg","newCurrentPrice","_this3","paddingBottom","paddingRight","textAlign","OrderTable","Component","Login","useNavigate","emailLog","setEmailLog","passwordLog","setPasswordLog","stateId","setStateId","login","resOrders","dataFromUser","dataFromUserData","password","location","href","onSubmit","preventDefault","required","Link","to","Register","nameReg","setNameReg","emailReg","setEmailReg","passwordReg","setPasswordReg","register","handleSubmit","App","Router","Routes","Route","exact","path","element","ReactDOM","render","StrictMode","document","getElementById","nameTradingviewSybmol","module","exports","Symbol","Error","x","toString","replace"],"mappings":"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","file":"static/js/main.3f35abde.chunk.js","sourcesContent":["import { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n<ToastContainer theme=\"dark\" />\n\ntoast.configure();\n\nconst showToastSuccess = (message) => {\n\n    toast.success(message, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n}\n\nconst showToastError = (message) => {\n\n    toast.error(message, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n}\n\nconst showToastWarn = (message) => {\n\n    toast.info(message, {\n        position: \"top-right\",\n        autoClose: 4000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n}\n\nexport {\n    showToastSuccess, \n    showToastError,\n    showToastWarn,\n}","import { showToastSuccess, showToastError, showToastWarn } from \"../../utils/toast\";\n\n/* In case of buyAt and sellAt, since our historical data isnt smooth execute order even if price is\n * at +-0.03*price_at_that_time margin\n */\n\nconst handleBuyNow = (balance, holding, order, currentPrice) => {\n  if (balance - order.amount < 0) {\n    showToastError(`Buy Order can't be executed not enough balance`);\n    return {\n      success: false,\n      newBalance: balance,\n      newHolding: holding,\n    };\n  }\n\n  // 1. Reduce balance\n  let newBalance = balance - order.amount;\n\n  // 2. Increase holding\n  let newHolding = { ...holding };\n\n  // orderAmt / priceOfEachCoin\n  let newBoughtHolding = order.amount / currentPrice[order.coinSelectedName];\n\n  if (!newHolding[order.coinSelectedName]) {\n    // first time buying that coin/stocks\n    newHolding[order.coinSelectedName] = newBoughtHolding;\n  } else {\n    newHolding[order.coinSelectedName] += newBoughtHolding;\n  }\n\n  showToastSuccess(`Buy Order executed successfully for amount: $${order.amount}`);\n  return {\n    success: true,\n    newBalance: newBalance,\n    newHolding: newHolding,\n  };\n};\n\nconst handleSortNow = (balance, sortedHolding, order, currentPrice) => {\n  if (balance - order.amount < 0) {\n    showToastError(`Sort Order can't be executed not enough balance`);\n    return {\n      success: false,\n      newBalance: balance,\n      newSortedHolding: sortedHolding,\n    };\n  }\n\n  // 1. Reduce balance\n  let newBalance = balance - order.amount;\n\n  // 2. Increase sorted holding\n  let newSortedHolding = { ...sortedHolding };\n\n  let coinBought = order.amount / currentPrice[order.coinSelectedName];\n  let sortedOrder = {\n    // priceWhenBought: currentPrice[order.coinSelectedName],\n    amount: order.amount,\n    coinBought: coinBought,\n  };\n\n  if (!newSortedHolding[order.coinSelectedName]) {\n    newSortedHolding[order.coinSelectedName] = [];\n    newSortedHolding[order.coinSelectedName].push(sortedOrder);\n  } else {\n    newSortedHolding[order.coinSelectedName].push(sortedOrder);\n  }\n\n  showToastSuccess(`Sort Order executed successfully for amount: $${order.amount}`);\n  return {\n    success: true,\n    newBalance: newBalance,\n    newSortedHolding: newSortedHolding,\n  };\n};\n\nconst handleSellNow = (balance, holding, sortedHolding, order, currentPrice) => {\n  let newSellHolding = order.amount / currentPrice[order.coinSelectedName]; //Calculating current price of the coin to be sold.\n  let newHolding = { ...holding };\n  let newBalance = balance;\n\n  if (newHolding[order.coinSelectedName] < newSellHolding) {\n    showToastError(\n      `Sell Order can not be placed not enough holding for ${order.coinSelectedName}`\n    );\n    return {\n      success: false,\n      newBalance: newBalance,\n      newHolding: newHolding,\n    };\n  }\n\n  // selling that coin/stocks\n  newHolding[order.coinSelectedName] -= newSellHolding;\n  newBalance = balance + order.amount;\n\n  //If holdings are 0 delete the coin from holdings\n  if (newHolding[order.coinSelectedName] == 0) {\n    delete newHolding[order.coinSelectedName];\n  }\n\n  showToastSuccess(`Sell Order executed successfully for amount: $${order.amount}`);\n  return {\n    success: true,\n    newBalance: newBalance,\n    newHolding: newHolding,\n  };\n};\n\n// yet to be properly implemented\n// from the list of the all sortedOrders placed, sell the selected sortedOrder, sell all or none\nconst handleSellSortNow = (balance, sortedHolding, order, currentPrice) => {\n\n  showToastWarn('Sell Sort Now is yet to be properly implemented!');\n  return {\n    success: false,\n    newBalance: balance,\n    newSortedHolding: sortedHolding,\n  }\n  /*\n  if(currentPrice[order.coinSelectedName] < order.priceWhenOrderWasPlaced){\n    window.alert(\"You will suffer a loss\");\n  }\n  \n  let newSellHolding = order.amount / currentPrice[order.coinSelectedName];\n\n  let newHolding = { ...sortedHolding };\n\n  let newBalance = balance ;\n\n  // The profit on selling on low .\n\n  let profit =\n    order.amount * (order.priceWhenOrderWasPlaced -  currentPrice[order.coinSelectedName]);\n  console.log(newHolding[order.coinSelectedName][0].coinBought);\n\n  console.log(\"New Sorted\" + newSellHolding);\n  console.log(\"Profit\" + profit);\n\n  if (newHolding[order.coinSelectedName][0].coinBought >= newSellHolding) {\n    // selling that coin/stocks\n    newHolding[order.coinSelectedName] -= newSellHolding;\n    newBalance = balance + profit;\n  } else {\n     window.alert(\"Not enough sorted holdings\");\n  }\n\n  //If holdings are 0 delete the coin from holdings\n  \n  if (newHolding[order.coinSelectedName] == 0) {\n    delete newHolding[order.coinSelectedName];\n  }\n\n  return {\n    newBalance: newBalance,\n    newHolding: newHolding,\n  };\n  console.log(\"inside handlesell sortt\");\n  */\n};\n\nconst handleBuyAt = (balance, holding, order) => {};\n\nconst handleSortAt = (balance, sortedHolding, order) => {};\n\nconst handleSellAt = (balance, holding, sortedHolding, order) => {};\n\nexport {\n  handleBuyNow,\n  handleSortNow,\n  handleSellNow,\n  handleBuyAt,\n  handleSortAt,\n  handleSellAt,\n  handleSellSortNow,\n};\n","/*\nallOrders = [\n    id: 1, \n    currency: BTCUSDT,\n    type: \"BuyAt\", \n    amount: 410, \n    time: 2021-3-4_4-4-5,\n    whenPriceReach: 3425, \n    completed: false\n]\n\norder = {\n\tsymbol: \"BINANCE:BTCUSDT\",\n\tcoinSelectedName: \"bitcoin\",\n\ttype: \"sortNow\",\n\tamount: 5000,\n\tpriceWhenOrderWasPlaced: this.state.currentPrice(\"bitcoin\"),\n\texecuteWhenPriceAt: null, //\n\torderCompleted: true,\n}\n*/\n\nimport {\n\thandleBuyNow,\n\thandleSortNow,\n\thandleBuyAt,\n\thandleSortAt,\n\thandleSellNow,\n\thandleSellAt,\n} from \"../components/Home/handleOrder\";\n\nimport axios from \"axios\";\n\nconst getUpdatedTotalAssetAmt = (balance, holding, sortedHolding, currentPrice) => {\n\n\tlet newTotalAssetAmt = balance;\n\t// console.log(\"total balance\", newTotalAssetAmt);\n\n\t// handle holding\n\tfor(let coinName in holding) {\n\t\tif(currentPrice[coinName]) {\n\t\t\tnewTotalAssetAmt += holding[coinName] * currentPrice[coinName];\n\t\t}\n\t\telse {\n\t\t\t// console.log(`currentPrice for coin \"${coinName}\" was not updated yet, cant get newTotalAssetAmt `); \n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// handle sortedHolding\n\tfor(let coinName in sortedHolding) {\n\t\tif(currentPrice[coinName]) {\n\n\t\t\t// sortedHolding[coinName] is an array, itterate through all sortedHolding[coinName]\n\t\t\tfor(let sortedHoldingOrder of sortedHolding[coinName]) {\n\t\t\t\t// worthThen + (worthThen - currentWorth) = 2*worthThen - currentWorth\n\t\t\t\tnewTotalAssetAmt += 2*(sortedHoldingOrder.amount) - (sortedHoldingOrder.coinBought*currentPrice[coinName]);\n\n\t\t\t\t// console.log(\"\\n\", sortedHoldingOrder, sortedHoldingOrder[\"coinBought\"], currentPrice[coinName]);\n\t\t\t\t// console.log(\" \", newTotalAssetAmt);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// console.log(`currentPrice for coin \"${coinName}\" was not updated yet, cant get newTotalAssetAmt `); \n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn newTotalAssetAmt;\n};\n\n\nconst dateCompare = (a,b) => {\n\t/*\n\t\ttrue if a > b;\n\t\telse false;\n\t*/\n\t// console.log(\"comparing \", new Date(a).getTime(), new Date(b).getTime(), new Date(a).getTime() > new Date(b).getTime());\n\n\treturn new Date(a).getTime() > new Date(b).getTime();\n};\n\n\n// itterate through allOrders[] check if any previous order was completed\nconst executePrevCompletedOrders = async (allOrders, balance, holding, sortedHolding, getCurrentPrice) => {\n\n\tlet newBalanceAfterCompletingPrevOrders = balance;\n\tlet newHoldingAfterCompletingPrevOrders = holding;\n\tlet newSortedHoldingAfterCompletingPrevOrders = sortedHolding;\n\n\t// console.log(allOrders);\n\n\tlet updatedAllOrders = allOrders.slice();\n\t// console.log(updatedAllOrders);\n\n\n    let oldestUnfinishedOrderTime = null;\n\tlet unfinishedOrders = {};\n\n    for (let i=0; i<updatedAllOrders.length; i++) {\n\t\tconst order = updatedAllOrders[i];\n\t\t// console.log(order, order.orderCompleted, order.orderCompleted===false);\n\t\tif (order.orderCompleted === false) {\n\t\t\tif(!oldestUnfinishedOrderTime) {\n\t\t\t\tconsole.log(\"oldest order that was not completed\", order);\n\t\t\t\toldestUnfinishedOrderTime = order.time;\n\t\t\t}\n\t\t\tunfinishedOrders[i] = order;\n\t\t}\n    }\n\n\tconsole.log(\"\\n unfinished orders\", unfinishedOrders);\n\tconsole.log(\"\\n oldes unfished order\", oldestUnfinishedOrderTime);\n\n\tif(oldestUnfinishedOrderTime === null) {\n\t\tconsole.log(\"No pendign orders\");\n\t\treturn {\n\t\t\tnewBalance: newBalanceAfterCompletingPrevOrders,\n\t\t\tnewHolding: newHoldingAfterCompletingPrevOrders,\n\t\t\tnewSortedHolding: newSortedHoldingAfterCompletingPrevOrders,\n\t\t\tupdatedAllOrders: updatedAllOrders,\n\t\t};\n\t}\n\n\t// testing\n\t// oldestUnfinishedOrderTime = 1642633200000;\n\n    // get historical data\n    const historicalDataFetchUrl = `https://api.coincap.io/v2/assets/bitcoin/history?interval=h1&start?=${oldestUnfinishedOrderTime}`;\n\tconsole.log(historicalDataFetchUrl);\n\n\tconst res = await axios.get(historicalDataFetchUrl, {\n\t\traxConfig: {\n\t\t\tretry: 5,\n\t\t\tretryDelay: 800\n\t\t}\n\t});\n\tconsole.log(res);\n\tconst historicalData = res.data.data;\n\n\tconsole.log(\"data fetched\", historicalData);\n\tconsole.log(typeof(oldestUnfinishedOrderTime), new Date(historicalData[0].date).getTime(), typeof(historicalData[0].date));\n\n\t// console.log(unfinishedOrders, unfinishedOrders[0]);\n\tfor(let index in unfinishedOrders) {\n\n\t\tlet unfinishedOrder = unfinishedOrders[index];\n\n\t\tfor(let hisData of historicalData) {\n\t\t\t// console.log(hisData.priceUsd);\n\t\t\tif(dateCompare(hisData.date, oldestUnfinishedOrderTime)) { // hisData.time > oldestUnfinishedOrderTime\n\n\t\t\t\tif( (unfinishedOrder.priceWhenOrderWasPlaced >= unfinishedOrder.executeWhenPriceAt && Number(hisData.priceUsd) <= unfinishedOrder.executeWhenPriceAt) ||\n\t\t\t\t\t(unfinishedOrder.priceWhenOrderWasPlaced <= unfinishedOrder.executeWhenPriceAt && Number(hisData.priceUsd) >= unfinishedOrder.executeWhenPriceAt)\n\t\t\t\t) {\n\t\t\t\t\tconsole.log(\"\\n\\n price range matched\", unfinishedOrder, Number(hisData.priceUsd));\n\n\t\t\t\t\t// await till the current price is defined\n\t\t\t\t\t//// improvement: only run for a fix time, \n\t\t\t\t\twhile(getCurrentPrice()[unfinishedOrder.coinSelectedName] === null) {\n\t\t\t\t\t\tconsole.log(\"current price not defined awaiting\");\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 500));\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(\"current price is defined\");\n\n\t\t\t\t\n\t\t\t\t\tif(unfinishedOrder.type === \"buyAt\") {\n\t\t\t\t\t\tconst { success, newBalance, newHolding } = handleBuyNow(\n\t\t\t\t\t\t\tbalance,\n\t\t\t\t\t\t\tholding,\n\t\t\t\t\t\t\tunfinishedOrder,\n\t\t\t\t\t\t\tgetCurrentPrice()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif(!success)\treturn;\n\t\t\t\t\t\tconsole.log(\"order was\", unfinishedOrder, getCurrentPrice());\n\t\t\t\t\t\tconsole.log(\"executing buy at\", newBalance, newHolding)\n\t\t\t\t\t\tnewBalanceAfterCompletingPrevOrders = newBalance;\n\t\t\t\t\t\tnewHoldingAfterCompletingPrevOrders = newHolding;\n\t\t\t\t\t}\n\t\t\t\t\telse if(unfinishedOrder.type === \"sortAt\") {\n\t\t\t\t\t\tconst { success, newBalance, newSortedHolding } = handleSortNow(\n\t\t\t\t\t\t\tbalance,\n\t\t\t\t\t\t\tsortedHolding,\n\t\t\t\t\t\t\tunfinishedOrder,\n\t\t\t\t\t\t\tgetCurrentPrice()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif(!success)\treturn;\n\t\t\t\t\t\tconsole.log(\"executing sortAt\", newBalance, newSortedHolding);\n\t\t\t\t\t\tnewBalanceAfterCompletingPrevOrders = newBalance;\n\t\t\t\t\t\tnewSortedHoldingAfterCompletingPrevOrders = newSortedHolding;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconsole.log(\"can not complete a unfinished order cause its not buyAt/sortAt\", unfinishedOrder);\n\t\t\t\t\t}\n\n\t\t\t\t\tunfinishedOrder.orderCompleted = true;\n\t\t\t\t\tupdatedAllOrders[index] = unfinishedOrder;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.log(\" updatedAllOrders\", updatedAllOrders);\n\n\treturn {\n\t\tnewBalance: newBalanceAfterCompletingPrevOrders,\n\t\tnewHolding: newHoldingAfterCompletingPrevOrders,\n\t\tnewSortedHolding: newSortedHoldingAfterCompletingPrevOrders,\n\t\tupdatedAllOrders: updatedAllOrders,\n\t}\n};\n\nexport {\n  getUpdatedTotalAssetAmt,\n  executePrevCompletedOrders,\n};\n","import React from 'react'\nimport './HeaderComp.css';\n\nfunction HeaderComp() {\n  return (\n    <div className=\"HeaderComp\">\n      <h1>Virtual Trading</h1>\n    </div>\n  )\n}\n\nexport default HeaderComp","import React from \"react\";\nimport TradingViewWidget, { Themes } from \"react-tradingview-widget\";\nimport \"./Widget.css\";\nimport { convertNameToTradingviewSybmol } from \"../../utils/nameSymbol\";\n\nfunction Widget(props) {\n  return (\n    <div className=\"widget-class\">\n      <TradingViewWidget\n        symbol={convertNameToTradingviewSybmol(props.coinSelectedName)}\n\n        width={950}\n        height={550}\n\n        timezone=\"Asia/Kolkata\"\n        locale=\"in\"\n\n        style=\"2\"\n        theme={Themes.DARK}\n        range=\"12m\"\n\n        // toolbar_bg = \"#f1f3f6\"\n        allow_symbol_change={false}\n        details={true}\n        studies={[\"MASimple@tv-basicstudies\"]}\n        // hotlist = {true}\n        // calendar = {true}\n      />\n    </div>\n  );\n}\n\nexport default React.memo(Widget);\n","import React, { useState, useEffect } from \"react\";\nimport \"./BuySell.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AccountBalanceWalletIcon from \"@mui/icons-material/AccountBalanceWallet\";\nimport MonetizationOnRoundedIcon from \"@mui/icons-material/MonetizationOnRounded\";\nimport CottageIcon from \"@mui/icons-material/Cottage\";\nimport { convertNameToTradingviewSybmol } from \"../../utils/nameSymbol\";\nimport {\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  Modal,\n  Box,\n  Stack,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  TextField,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  AppBar,\n  Tabs,\n  Tab\n} from \"@mui/material\";\n\nimport { numberWithCommas } from \"../../utils/miscUtil\";\nimport { StylesContext } from \"@material-ui/styles\";\n\n//Modal Styles\nconst style = {\n  modal: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"#131721\",\n    color: \"white\",\n    border: \"2px solid #FFFFFF\",\n    boxShadow: 24,\n    p: 4,\n  },\n  list: {\n    width: \"100%\",\n    height: \"70%\",\n    maxWidth: 360,\n    color: \"white\",\n    bgcolor: \"#131722\",\n    borderRadius: 3,\n  },\n  dropList: {\n    color: \"black\",\n    bgcolor: \"white\",\n    borderRadius: \"5px\",\n    marginTop: \"15px\",\n    marginBottom: \"10px\",\n    maxWidth: \"56%\",\n  },\n  textBox: {\n    bgcolor: \"white\",\n    borderRadius: \"5px\",\n    maxWidth: \"80%\",\n    marginLeft: \"15px\",\n  },\n  stack: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    margin: \"10px\",\n  },\n  coinlist: {\n    width: \"auto\",\n  },\n  radioList: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"60%\",\n    margin: \"0px\",\n  },\n  radioButton: {\n    overFlow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    maxWidth: \"50%\",\n    fontSize: \"10px\",\n  },\n  bgtext: {\n    bgcolor: \"#131721\",\n    color: \"white\",\n  },\n  tabsAlign: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  upMarign:{\n    marginTop: \"30px\",\n  }\n};\n\nexport default function BuySell(props) {\n  // console.log(\"\\n\\n\\n\\n was re rendered\", props.totalAssetAmt);\n\n  let totalAssetColor = \"white\";\n  if (props.lastTotalAssetChange === \"negative\") {\n    totalAssetColor = \"red\";\n  } else if (props.lastTotalAssetChange === \"positive\") {\n    totalAssetColor = \"#32CD32\";\n  }\n\n  const [coin, setCoin] = React.useState(\"bitcoin\");\n  const handleChange = (event) => {\n    setCoin(event.target.value);\n    props.onChange(event.target.value);\n  };\n\n\n  //Buys Sell data states\n  const [orderType, setOrderType] = useState(\"\");\n  const [orderAmount, setOrderAmount] = useState(null);\n  const [buyAtAmount, setBuyAtAmount] = useState(null);\n  const [sellAtAmount, setSellAtAmount] = useState(null);\n  const [sortAtAmount, setSortAtAmount] = useState(null);\n  const [sellSortAtAmount, setSellSortAtAmount] = useState(null);\n\n\n  //Buy Sell Modal handlers\n  const [buyopen, setBuyOpen] = useState(false);\n  const [sellopen, setSellOpen] = useState(false);\n  const [sortopen, setSortOpen] = useState(false);\n  const handleBuyOpen = () => setBuyOpen(true);\n  const handleSellOpen = () => setSellOpen(true);\n  const handleSortOpen = () => setSortOpen(true);\n\n  const handleBuyClose = () => {\n    setBuyOpen(false);\n    setOrderAmount(null);\n    setBuyAtAmount(null);\n  }\n  const handleSellClose = () => {\n    setSellOpen(false);\n    setOrderAmount(null);\n    setSellAtAmount(null);\n  }\n  const handleSortClose = () => {\n    setSortOpen(false);\n    setOrderAmount(null);\n    setSortAtAmount(null);\n  }\n\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTab(newValue);\n  }\n\n  const handleBuyOrderClick = () => {\n    console.log(\"clicked on buy\");\n    handleBuyClose();\n    let order = {\n      sybmol: convertNameToTradingviewSybmol(coin),\n      coinSelectedName: coin,\n      type: orderType,\n      amount: Number(orderAmount),\n      executeWhenPriceAt: Number(buyAtAmount),\n      orderCompleted: buyAtAmount ? false: true,\n    };\n    props.placeOrder(order);\n  };\n\n  const handleSortOrderClick = () => {\n    console.log(\"clicked on sort\");\n    handleSortClose();\n    let order = {\n      sybmol: convertNameToTradingviewSybmol(props.coinSelectedName),\n      coinSelectedName: props.coinSelectedName,\n      type: orderType,\n      amount: Number(orderAmount),\n      executeWhenPriceAt: Number(sortAtAmount),\n      orderCompleted: sortAtAmount ? false: true,\n    };\n    props.placeOrder(order);\n  };\n\n  const handleSellModalClick = () => {\n    handleSellClose();\n    console.log(\"clicked on sell\");\n    let order = {\n      sybmol: convertNameToTradingviewSybmol(coin),\n      coinSelectedName: coin,\n      type: orderType,\n      amount: Number(orderAmount),\n      executeWhenPriceAt: Number(sellAtAmount),\n      orderCompleted: sellAtAmount ? false: true,\n    };\n    props.placeOrder(order);\n  };\n\n  const handleSellSortModalClick = () => {\n    console.log(\"clicked on Sell Sort\");\n    handleSellClose();\n    let order = {\n      sybmol: convertNameToTradingviewSybmol(coin),\n      coinSelectedName: coin,\n      type: orderType,\n      amount: Number(orderAmount),\n      executeWhenPriceAt: Number(sellAtAmount),\n      orderCompleted: sellAtAmount ? false : true,\n    };\n    console.log(order);\n    props.placeOrder(order);\n  };\n\n  const getFormatedPrice = (totalAssetAmt, digitsAfterDecimal=6) => {\n    if (totalAssetAmt === \"\") {\n      return \"\";\n    } else {\n      return numberWithCommas(parseFloat(totalAssetAmt.toFixed(digitsAfterDecimal)));\n    }\n  };\n\n  const getFormatedHolding = (holding) => {\n    let formatedHolding = ``;\n\n    if (!holding) return formatedHolding;\n\n    formatedHolding += `\\n\\n`;\n\n    for (let coinName in holding) {\n      formatedHolding += coinName;\n      formatedHolding += `: $`;\n      formatedHolding += getFormatedPrice(holding[coinName]*props.currentPrice[coinName], 2);\n      formatedHolding += `\\n`;\n    }\n\n    // return formatedHolding;\n    return (\n      <div style={{ marginTop: \"-10px\" }}>\n        {formatedHolding.split(/\\n/).map((line) => (\n          <div>{line}</div>\n        ))}\n      </div>\n    );\n  };\n\n  const getFormatedSortedHolding = (sortedHolding) => {\n    let formatedSortedHolding = ``;\n\n    if(! sortedHolding) return formatedSortedHolding;\n\n    for(let coinName in sortedHolding) {\n      if(props.currentPrice[coinName]) {\n  \n        formatedSortedHolding += coinName;\n        formatedSortedHolding += `: $ `;\n\n        let currentCoinAmt = 0;// total amount of coins own\n        let currentCoinWorth = 0; // price of the coin own;\n\n        for (let sortedHoldingOrder of sortedHolding[coinName]) {\n          // worthThen + (worthThen - currentWorth) = 2*worthThen - currentWorth\n          currentCoinAmt += sortedHoldingOrder.amount;\n          currentCoinWorth +=\n            2 * sortedHoldingOrder.amount -\n            sortedHoldingOrder.coinBought * props.currentPrice[coinName];\n        }\n\n        // formatedSortedHolding += '';\n        formatedSortedHolding += getFormatedPrice(currentCoinWorth, 2);\n        formatedSortedHolding += '\\n';\n      }\n    }\n\n    // return formatedSortedHolding;\n    return (\n      <div style={{ marginTop : \"-10px\" }}>\n        {formatedSortedHolding.split(/\\n/).map((line) => (\n          <div>{line}</div>\n        ))}\n      </div>\n    );\n  }\n  return (\n    <div className=\"BuySell-div\">\n      <div className=\"Dropdown\">\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Coin</InputLabel>\n          <Select\n            sx={style.coinlist}\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            fullWidth\n            value={coin}\n            label=\"Coin\"\n            onChange={handleChange}\n          >\n            <MenuItem value={\"bitcoin\"}>Bitcoin</MenuItem>\n            <MenuItem value={\"ethereum\"}>Ethereum</MenuItem>\n            <MenuItem value={\"dogecoin\"}>Doge Coin</MenuItem>\n            <MenuItem value={\"tesla\"}>Tesla</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n      <List sx={style.list}>\n        <ListItem>\n          <ListItemAvatar>\n            <ListItemAvatar>\n              <MonetizationOnRoundedIcon fontSize=\"large\" />\n            </ListItemAvatar>\n          </ListItemAvatar>\n          {/* <ListItemText primary={`Total Assets ${props.totalAssetAmt}`} /> */}\n          <ListItemText\n            disableTypography\n            primary={\n              <>\n                <Typography display=\"inline\">Total Assets: $ </Typography>\n\n                <Typography display=\"inline\" style={{ color: totalAssetColor }}>\n                  {getFormatedPrice(props.totalAssetAmt)}\n                </Typography>\n              </>\n            }\n          />\n        </ListItem>\n\n        <ListItem>\n          <ListItemAvatar>\n            <AccountBalanceWalletIcon fontSize=\"large\" />\n          </ListItemAvatar>\n          <ListItemText\n            primary={`Balance: $ ${numberWithCommas(props.balance)}`}\n          />\n        </ListItem>\n\n        <ListItem>\n          <ListItemAvatar>\n            <ListItemAvatar>\n              <CottageIcon fontSize=\"large\" />\n            </ListItemAvatar>\n          </ListItemAvatar>\n\n          <ListItemText primary={`Holdings: `} />\n        </ListItem>\n\n        <ListItem>\n          <ListItemAvatar>\n            <ListItemAvatar></ListItemAvatar>\n          </ListItemAvatar>\n          {getFormatedHolding(props.holding)}\n          {/* <ListItemText primary={`${getFormatedHolding(props.holding)} `} /> */}\n        </ListItem>\n\n        <ListItem>\n          <ListItemAvatar>\n            <ListItemAvatar>\n              <CottageIcon fontSize=\"large\" />\n            </ListItemAvatar>\n          </ListItemAvatar>\n          <ListItemText primary={`Sorted Holdings`} />\n        </ListItem>\n\n        <ListItem>\n          <ListItemAvatar>\n            <ListItemAvatar></ListItemAvatar>\n          </ListItemAvatar>\n          {getFormatedSortedHolding(props.sortedHolding)}\n          {/* <ListItemText\n            primary={`${getFormatedSortedHolding(props.sortedHolding)}`}\n          /> */}\n        </ListItem>\n      </List>\n\n      {/*Buy Sell Sort Buttons Row Starts here*/}\n\n      <div className=\"button-row\">\n        {/*Buy Button*/}\n        <button\n          onClick={() => {\n            handleBuyOpen();\n            setOrderType(\"buyNow\");\n            // props.placeOrder(null);\n          }}\n          className=\"button green-button\"\n        >\n          <span>Buy</span>\n        </button>\n        <Modal open={buyopen} onClose={() => setBuyOpen(false)}>\n          <Box sx={style.modal}>\n            <h3>Buy Modal</h3>\n            <Stack sx={style.stack} direction=\"row\" spacing={2}>\n              <h3>Order type :</h3>\n              <FormControl sx={style.radioList} fullWidth>\n                <RadioGroup\n                  row\n                  aria-label=\"gender\"\n                  color=\"black\"\n                  defaultValue=\"buyNow\"\n                  name=\"row-radio-buttons-group\"\n                  onChange={(e) => {\n                    setOrderType(e.target.value);\n                    // console.log(orderType);\n                  }}\n                >\n                  <FormControlLabel\n                    sx={style.radioButton}\n                    value=\"buyNow\"\n                    control={<Radio />}\n                    label=\"BUY NOW\"\n                  />\n                  <FormControlLabel\n                    sx={style.radioButton}\n                    value=\"buyAt\"\n                    control={<Radio />}\n                    label=\"BUY AT\"\n                  />\n                </RadioGroup>\n              </FormControl>\n            </Stack>\n            <Stack sx={style.stack} direction=\"row\" spacing={2}>\n              <h3>Buy Amount :</h3>\n              <TextField\n                sx={style.textBox}\n                value={orderAmount}\n                id=\"outlined-basic\"\n                type=\"number\"\n                label=\"Quantity (in $)\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setOrderAmount(e.target.value);\n                }}\n              />\n            </Stack>\n            {orderType === \"buyAt\" && (\n              <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                <h3>Buy AT Price :</h3>\n                <TextField\n                  sx={style.textBox}\n                  value={buyAtAmount}\n                  id=\"outlined-basic\"\n                  type=\"number\"\n                  label=\"Price\"\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    setBuyAtAmount(Number(e.target.value));\n                  }}\n                />\n              </Stack>\n            )}\n            <button\n              className=\"button green-button\"\n              onClick={handleBuyOrderClick}\n            >\n              <span>Buy</span>\n            </button>\n          </Box>\n        </Modal>\n        {/*Sort Button*/}\n\n        <button\n          onClick={() => {\n            handleSortOpen();\n            setOrderType(\"sortNow\");\n            // props.placeOrder();\n            console.log(\"called sell\");\n          }}\n          className=\"button blue-button\"\n        >\n          <span>Sort</span>\n        </button>\n        <Modal open={sortopen} onClose={() => setSortOpen(false)}>\n          <Box sx={style.modal}>\n            <h3>Sort Modal</h3>\n            <Stack sx={style.stack} direction=\"row\" spacing={2}>\n              <h3>Order type :</h3>\n              <FormControl sx={style.radioList} fullWidth>\n                <RadioGroup\n                  row\n                  aria-label=\"gender\"\n                  color=\"black\"\n                  defaultValue=\"sortNow\"\n                  name=\"row-radio-buttons-group\"\n                  onChange={(e) => {\n                    setOrderType(e.target.value);\n                    // console.log(orderType);\n                  }}\n                >\n                  <FormControlLabel\n                    sx={style.radioButton}\n                    value=\"sortNow\"\n                    control={<Radio />}\n                    label=\"Sort NOW\"\n                  />\n                  <FormControlLabel\n                    sx={style.radioButton}\n                    value=\"sortAt\"\n                    control={<Radio />}\n                    label=\"Sort AT\"\n                  />\n                </RadioGroup>\n              </FormControl>\n            </Stack>\n            <Stack sx={style.stack} direction=\"row\" spacing={2}>\n              <h3>Sort Amount :</h3>\n              <TextField\n                sx={style.textBox}\n                value={orderAmount}\n                id=\"outlined-basic\"\n                type=\"number\"\n                label=\"Quantity (in $)\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setOrderAmount(e.target.value);\n                }}\n              />\n            </Stack>\n            {orderType === \"sortAt\" && (\n              <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                <h3>Sort AT Price :</h3>\n                <TextField\n                  sx={style.textBox}\n                  value={sortAtAmount}\n                  id=\"outlined-basic\"\n                  type=\"number\"\n                  label=\"Price\"\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    setSortAtAmount(e.target.value);\n                  }}\n                />\n              </Stack>\n            )}\n            <button\n              className=\"button blue-button\"\n              onClick={handleSortOrderClick}\n            >\n              <span>Sort</span>\n            </button>\n          </Box>\n        </Modal>\n\n        {/*Sell Button*/}\n\n        <button\n          onClick={() => {\n            handleSellOpen();\n            if (selectedTab === 0) setOrderType(\"sellNow\");\n            else setOrderType(\"sellSortNow\");\n            // props.placeOrder();\n            console.log(\"called sell\");\n          }}\n          className=\"button red-button\"\n        >\n          <span>Sell</span>\n        </button>\n        <Modal open={sellopen} onClose={() => setSellOpen(false)}>\n          <Box sx={style.modal}>\n            {/* <h3>Sell Modal text</h3> */}\n            <AppBar sx={style.bgtext}>\n              <Tabs\n                sx={style.tabsAlign}\n                value={selectedTab}\n                onChange={handleTabChange}\n              >\n                <Tab sx={style.bgtext} label=\"Sell Normal\" />\n                <Tab\n                  sx={style.bgtext}\n                  label=\"Sell Sort\"\n                />\n              </Tabs>\n            </AppBar>\n\n            {selectedTab === 0 ? (\n              <Box sx={style.upMarign}>\n                <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                  <h3>Order type :</h3>\n                  {/* <FormControl sx={style.dropList} fullWidth>\n                <InputLabel id=\"demo-simple-select-label\">\n                  Order Type\n                </InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={orderType}\n                  label=\"Type\"\n                  onChange={(e) => {\n                    setOrderType(e.target.value);\n                  }}\n                >\n                  <MenuItem value={\"sellAt\"}>Sell At</MenuItem>\n                  <MenuItem value={\"sellNow\"}>Sell Now</MenuItem>\n                </Select>\n              </FormControl> */}\n                  <FormControl sx={style.radioList} fullWidth>\n                    <RadioGroup\n                      row\n                      aria-label=\"gender\"\n                      color=\"black\"\n                      defaultValue=\"sellNow\"\n                      name=\"row-radio-buttons-group\"\n                      onChange={(e) => {\n                        setOrderType(e.target.value);\n                        // console.log(orderType);\n                      }}\n                    >\n                      <FormControlLabel\n                        sx={style.radioButton}\n                        value=\"sellNow\"\n                        control={<Radio />}\n                        label=\"SELL NOW\"\n                      />\n                      <FormControlLabel\n                        sx={style.radioButton}\n                        value=\"sellAt\"\n                        control={<Radio />}\n                        label=\"SELL AT\"\n                      />\n                    </RadioGroup>\n                  </FormControl>\n                </Stack>\n                <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                  <h3>Sell Amount :</h3>\n                  <TextField\n                    sx={style.textBox}\n                    id=\"outlined-basic\"\n                    label=\"Quantity (in $)\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setOrderAmount(e.target.value);\n                    }}\n                  />\n                </Stack>\n                {orderType === \"sellAt\" && (\n                  <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                    <h3>Sell AT Price :</h3>\n                    <TextField\n                      sx={style.textBox}\n                      value={sellAtAmount}\n                      id=\"outlined-basic\"\n                      type=\"number\"\n                      label=\"Price\"\n                      variant=\"outlined\"\n                      onChange={(e) => {\n                        setSellAtAmount(e.target.value);\n                      }}\n                    />\n                  </Stack>\n                )}\n                <button\n                  className=\"button red-button\"\n                  onClick={handleSellModalClick}\n                >\n                  <span>Sell</span>\n                </button>\n              </Box>\n            ) : (\n              <Box sx={style.upMarign}>\n                <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                  <h3>Order type :</h3>\n                  <FormControl sx={style.radioList} fullWidth>\n                    <RadioGroup\n                      row\n                      aria-label=\"gender\"\n                      color=\"black\"\n                      defaultValue=\"sellSortNow\"\n                      name=\"row-radio-buttons-group\"\n                      onChange={(e) => {\n                        setOrderType(e.target.value);\n                        // console.log(orderType);\n                      }}\n                    >\n                      <FormControlLabel\n                        sx={style.radioButton}\n                        value=\"sellSortNow\"\n                        control={<Radio />}\n                        label=\"SELL NOW\"\n                      />\n                      <FormControlLabel\n                        sx={style.radioButton}\n                        value=\"sellSortAt\"\n                        control={<Radio />}\n                        label=\"SELL AT\"\n                      />\n                    </RadioGroup>\n                  </FormControl>\n                </Stack>\n                <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                  <h3>Sell Amount :</h3>\n                  <TextField\n                    sx={style.textBox}\n                    id=\"outlined-basic\"\n                    type=\"number\"\n                    label=\"Quantity\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setOrderAmount(e.target.value);\n                    }}\n                  />\n                </Stack>\n                {orderType === \"sellSortAt\" && (\n                  <Stack sx={style.stack} direction=\"row\" spacing={2}>\n                    <h3>Sell Sort at Price :</h3>\n                    <TextField\n                      sx={style.textBox}\n                      value={sellSortAtAmount}\n                      id=\"outlined-basic\"\n                      type=\"number\"\n                      label=\"Price\"\n                      variant=\"outlined\"\n                      onChange={(e) => {\n                        setSellSortAtAmount(e.target.value);\n                      }}\n                    />\n                  </Stack>\n                )}\n                <button\n                  className=\"button red-button\"\n                  onClick={handleSellSortModalClick}\n                >\n                  <span>Sell Sort</span>\n                </button>\n              </Box>\n            )}\n          </Box>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles , makeStyles } from \"@material-ui/styles\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableFooter from \"@mui/material/TableFooter\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\nimport LastPageIcon from \"@mui/icons-material/LastPage\";\n\nconst styles = (theme) => ({\n  root: {\n    borderRadius: \"15px\",\n    width: \"95%\",\n    overflowX: \"auto\",\n    backgroundColor: \"#131722\",\n    color: \"blue\",\n  },\n  table: {\n    minWidth: 500,\n  },\n  head: {\n    fontSize: \"20px\",\n    color: \"white\",\n  },\n  tableRow: {\n    \"&$selected, &$selected:hover\": {\n      backgroundColor: \"red\",\n    },\n    color: \"white\",\n  },\n  tableCell: {\n    color: \"white\",\n  },\n  hover: {},\n  selected: {},\n});\n\n// This function is for the bottom bar which keeps pages\nfunction TablePaginationActions(props) {\n\n    const theme = {\n      color:\"white\",  \n      direction: \"rtl\",\n    };\n\n    function iconStyles() {\n      return {\n        whiteIcon: {\n          color: \"white\",\n        },\n      };\n    }\n  \n  const classes = makeStyles(iconStyles)();\n\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        className={classes.whiteIcon}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        className={classes.whiteIcon}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        className={classes.whiteIcon}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        className={classes.whiteIcon}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction OrderTable(props) {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const rows = [];\n  const { classes } = props;\n  \n  let id = 0;\n  // console.log(props.allOrders);\n\n  // This will insert all the orders in an array of objects in reversed order.\n  props.allOrders.forEach(function (arrayItem) {\n      id += 1;\n      // console.log(arrayItem);\n      rows[props.allOrders.length - id] = {\n        id: id,\n        time: arrayItem.time,\n        name: arrayItem.coinSelectedName,\n        coin: arrayItem.sybmol,\n        amount: arrayItem.amount,\n        coinBought: arrayItem.coinBought,\n        type: arrayItem.type,\n        status: arrayItem.orderCompleted ? \"true\" : \"false\",\n        priceat: arrayItem.executeWhenPriceAt,\n      };\n  });\n\n  //To Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n\n  const calculateGains = (order) => {\n    if(order.status === \"false\" || order.type === 'sellNow' || order.type === 'sellAt') {\n      return null;\n    }\n\n    if(order.type === 'buyNow') {\n      // console.log(order.coinBought, props.getCurrentPrice()[order.name], order.amount)\n      let currentWorth = parseFloat(order.coinBought) * parseFloat(props.getCurrentPrice()[order.name]);\n      let gain = currentWorth - parseFloat(order.amount);\n      gain = gain.toFixed(2);\n\n      return '$ '+gain;\n    }\n    else if(order.type === 'sortNow') {\n      let currentWorth = parseFloat(order.coinBought) * parseFloat(props.getCurrentPrice()[order.name]);\n      let gain = parseFloat(order.amount) - currentWorth;\n      gain = gain.toFixed(2);\n\n      return '$ '+gain;\n    }\n  }\n\n  const calculateGainPercent = (order) => {\n\n    if(order.status === \"false\" || order.type === 'sellNow' || order.type === 'sellAt') {\n      return null;\n    }\n\n    if(order.type === 'buyNow') {\n      // console.log(order.coinBought, props.getCurrentPrice()[order.name], order.amount)\n      let currentWorth = parseFloat(order.coinBought) * parseFloat(props.getCurrentPrice()[order.name]);\n      let gain = currentWorth - parseFloat(order.amount);\n\n      let gainPercent = gain/parseFloat(order.amount) * 100;\n      gainPercent = gainPercent.toFixed(2);\n      return gainPercent+'%';\n    }\n    else if(order.type === 'sortNow') {\n      let currentWorth = parseFloat(order.coinBought) * parseFloat(props.getCurrentPrice()[order.name]);\n      let gain = parseFloat(order.amount) - currentWorth;\n\n      let gainPercent = gain/parseFloat(order.amount) * 100;\n      gainPercent = gainPercent.toFixed(2);\n      return gainPercent+'%';\n    }\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell className={classes.head}></TableCell>\n            <TableCell className={classes.head}>Time</TableCell>\n            <TableCell className={classes.head}>Coin</TableCell>\n            <TableCell className={classes.head}>CoinCode</TableCell>\n            <TableCell className={classes.head}>Amount</TableCell>\n            <TableCell className={classes.head}>Gains</TableCell>\n            <TableCell className={classes.head}>Gains Percent</TableCell>\n            <TableCell className={classes.head}>Type</TableCell>\n            <TableCell className={classes.head}>Order Completed</TableCell>\n            <TableCell className={classes.head}>Price At</TableCell>\n          </TableRow>\n        </TableHead>\n\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.id} className={classes.tableRow}>\n              <TableCell\n                className={classes.tableCell}\n                component=\"th\"\n                scope=\"row\"\n              >\n              </TableCell>\n              <TableCell className={classes.tableCell}>{new Date(row.time).toLocaleString()}</TableCell>\n              <TableCell className={classes.tableCell}>{row.name}</TableCell>\n              <TableCell className={classes.tableCell}>{row.coin}</TableCell>\n              <TableCell className={classes.tableCell}>{'$'+row.amount}</TableCell>\n              <TableCell className={classes.tableCell}>{calculateGains(row)}</TableCell>\n              <TableCell className={classes.tableCell}>{calculateGainPercent(row)}</TableCell>\n              <TableCell className={classes.tableCell}>{row.type}</TableCell>\n              <TableCell className={classes.tableCell}>{row.status}</TableCell>\n              <TableCell className={classes.tableCell}>{row.priceat? row.priceat : null}</TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 50 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\n              colSpan={0}\n              sx={{ color: \"white\" }}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              //   SelectProps={{\n              //     inputProps: {\n              //       \"aria-label\": \"rows per page\",\n              //     },\n              //     native: true,\n              //   }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </Paper>\n  );\n}\n\nOrderTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(OrderTable);\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { getUpdatedTotalAssetAmt, executePrevCompletedOrders } from \"../../utils/orderUtil\"\nimport \"./BuySell.css\";\nimport HeaderComp from \"./HeaderComp\";\nimport Widget from \"./Widget\";\nimport BuySell from \"./BuySell\";\nimport OrderTable from \"./OrderTable\";\n\nimport {\n  handleBuyNow,\n  handleSortNow,\n  handleBuyAt,\n  handleSortAt,\n  handleSellNow,\n  handleSellAt,\n  handleSellSortNow,\n} from \"./handleOrder\";\n\nimport { showToastSuccess, showToastError, showToastWarn } from \"../../utils/toast\";\n\nimport { numberWithCommas } from \"../../utils/miscUtil\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.lastTotalAssetChangeTimeout = null;\n\n    // default value of the state\n    this.state = {\n      userId: null, // random alpha numeric string of len 10\n      email: null,\n      name: null,\n\n      lastTotalAssetChange: 'none',\n\n      totalAssetAmt: '',\n      balance: 10000,\n\n      holding: {},\n      sortedHolding: {},\n\n      allOrders: [],\n\n      coinSelectedName: \"bitcoin\", // default\n\n      currentPrice: {\n        bitcoin: null,\n        ethereum: null,\n        dogecoin: null,\n        tesla: null,\n      }\n\n    };\n\n  }\n\n\n  async componentDidMount() {\n    this.quickUpdateCurrentPriceUsingApi();\n    this.startUpdatingCurrentPriceUsingWebsocket();\n    await this.updateUserDataFromLocalStorage();// update the state if present in local storage else create a userId and save state to local storage\n    this.updatePrevCompletedOrders();\n  }\n\n  \n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"in componentdidupdate\", prevProps, prevState);\n\n    let newTotalAssetAmt = getUpdatedTotalAssetAmt(this.state.balance, this.state.holding, this.state.sortedHolding, this.state.currentPrice);\n    if(newTotalAssetAmt && this.state.totalAssetAmt !== newTotalAssetAmt) {\n      // this.setState({totalAssetAmt: newTotalAssetAmt}); \n      this.state.totalAssetAmt = newTotalAssetAmt; // no setState() so as to avoid re render\n      // console.log(\"this.state.totalAssetAmt updated to \", this.state.totalAssetAmt);\n    }\n\n    // update this.state.lastTotalAssetChange\n    if(prevState.totalAssetAmt !== '') { // handle case for first time totalAssetAmt updation\n      if(prevState.totalAssetAmt < this.state.totalAssetAmt) {\n        // console.log(\"total asset increased ;) green\");\n        clearTimeout(this.lastTotalAssetChangeTimeout);\n        this.setState({lastTotalAssetChange: 'positive'});\n        // this.lastTotalAssetChange = 'positive';\n        this.lastTotalAssetChangeTimeout = setTimeout(() => { this.setState({lastTotalAssetChange: 'none'}); }, 1500);\n      }\n\n      else if(prevState.totalAssetAmt > this.state.totalAssetAmt) {\n        // console.log(\"total asset increased ;( red\");\n        clearTimeout(this.lastTotalAssetChangeTimeout);\n        this.setState({lastTotalAssetChange: 'negative'});\n        // this.lastTotalAssetChange = 'negative';\n        this.lastTotalAssetChangeTimeout = setTimeout(() => { this.setState({lastTotalAssetChange: 'none'}); }, 1500);\n      }\n    }\n\n\n    // only update the userData in the localStorage if any newOrder was placed i.e allOrders was changed\n    //// broken arraysEqual\n    // if(! this.arraysEqual(prevState.allOrders, this.state.allOrders)) {\n      // console.log(\"both diff\", prevState.allOrders, this.state.allOrders);\n      let userData = {...this.state}; // all property of this.state except coinSelectedName, currentPrice\n      delete userData.coinSelectedName;\n      delete userData.currentPrice;\n      delete userData.totalAssetAmt;\n      \n      \n      window.localStorage.setItem(\"userData\", JSON.stringify(userData));\n      // console.log(\"in home inside component did update\" + JSON.stringify(userData));\n     \n      if(prevState.balance != this.state.balance)\n      this.updateDbFromLocalStorage();\n      // console.log(\" wrote to local storage\", userData);\n    // }\n\n  }\n\n  arraysEqual = (a1, a2) => {\n\n    const objectsEqual = (o1, o2) => {\n      return typeof o1 === 'object' && Object.keys(o1).length > 0 \n        ? Object.keys(o1).length === Object.keys(o2).length \n            && Object.keys(o1).every(p => objectsEqual(o1[p], o2[p]))\n        : o1 === o2;\n    }\n\n    return a1.length === a2.length && a1.every((o, idx) => objectsEqual(o, a2[idx]));\n  }\n\n  async updateUserDataFromLocalStorage() {\n    try {\n      let userDataLocalStorage = JSON.parse(window.localStorage.getItem(\"userData\"));\n       console.log(\"userdata in localStorage\", userDataLocalStorage);\n\n      if (userDataLocalStorage) {\n        const {userId, email, name, balance, holding, sortedHolding, allOrders} = userDataLocalStorage;\n        this.setState({userId, email, name, balance, holding, sortedHolding, allOrders});\n        // console.log(\"updated from localStorage to \", userId, email, name, balance, holding, sortedHolding, allOrders);\n      }\n\n    }\n    catch(err) {\n      console.log(\"cant read userData from local storage\",err);\n      // window.localStorage.setItem(\"userData\", \"\"); // if some data cant be read reset.\n    }\n\n  }\n\n  async updateDbFromLocalStorage() {\n     try {\n       const headers = {\n         \"Content-Type\": \"application/json\",\n         charset: \"UTF-8\",\n       };\n\n       let user = JSON.parse(window.localStorage.getItem(\"userData\"));\n       console.log(\"THis is uid\" + JSON.stringify(user));\n       \n\n       var data = {\n         email: user.email,\n         userId: user.userId,\n         holding: user.holding,\n         balance: user.balance,\n         allOrders: user.allOrders,\n         sortedHolding: user.sortedHolding,\n       };\n       const res = await axios({\n         method: \"POST\",\n         data : data,\n         headers: { headers },\n         withCredentials: true,\n         url: \"/user/updateUserData\",\n       });\n\n       if (res.data.success) {\n         console.log(\"Data Update in Db from Local Success: \", res.data);\n       }\n\n     } catch (err) {\n       console.log(\"Data Update in Db from Local Failed\", err);\n     }\n    \n  };\n\n  quickUpdateCurrentPriceUsingApi() {\n\n    // bitcoin\n    var config = {\n      method: 'get',\n      url: 'https://api.coincap.io/v2/rates/bitcoin',\n      headers: { }, \n      raxConfig: {\n        retry: 3,\n        retryDelay: 500\n      }\n    };\n    axios(config)\n    .then(function (response) {\n      // console.log('\\n\\n\\n got bitcoin price from api', response.data.data.rateUsd);\n      const price = response.data.data.rateUsd;\n      let updatedCurrentPrice = {...this.state.currentPrice};\n      updatedCurrentPrice.bitcoin = price;\n      this.setState({currentPrice: updatedCurrentPrice});\n    }.bind(this))\n    .catch(function (error) {\n      console.log(\"error updating currentPrice of bitcoin by API\", error);\n    });\n\n    // ethereum\n    var config = {\n      method: 'get',\n      url: 'https://api.coincap.io/v2/rates/ethereum',\n      headers: { }, \n      raxConfig: {\n        retry: 3,\n        retryDelay: 500\n      }\n    };\n    axios(config)\n    .then(function (response) {\n      // console.log('\\n\\n\\n got ethereum price from api', response.data.data.rateUsd);\n      const price = response.data.data.rateUsd;\n      let updatedCurrentPrice = {...this.state.currentPrice};\n      updatedCurrentPrice.ethereum = price;\n      this.setState({currentPrice: updatedCurrentPrice});\n    }.bind(this))\n    .catch(function (error) {\n      console.log(\"error updating ethereum currentPrice by API\", error);\n    });\n\n    // dogecoin\n    var config = {\n      method: 'get',\n      url: 'https://api.coincap.io/v2/rates/dogecoin',\n      headers: { }, \n      raxConfig: {\n        retry: 3,\n        retryDelay: 500\n      }\n    };\n    axios(config)\n    .then(function (response) {\n      // console.log('\\n\\n\\n dogecoin price got from api:', response.data.data.rateUsd);\n      const price = response.data.data.rateUsd;\n      let updatedCurrentPrice = {...this.state.currentPrice};\n      updatedCurrentPrice.dogecoin = price;\n      this.setState({currentPrice: updatedCurrentPrice});\n    }.bind(this))\n    .catch(function (error) {\n      console.log(\"error updating currentPrice by API\", error);\n    });\n\n  }\n\n  // updated the this.state.currentPrice, user details whenever we get a new current price\n  startUpdatingCurrentPriceUsingWebsocket() {\n\n    // 1. websocket listener for bitcoin, etherium, dogecoin\n\n    const pricesWs = new WebSocket(\n      \"wss://ws.coincap.io/prices?assets=bitcoin,ethereum,dogecoin\"\n    );\n    pricesWs.onmessage = function (msg) {\n      msg = JSON.parse(msg.data);\n      // console.log(msg)\n\n      let newCurrentPrice = {...this.state.currentPrice};\n\n      if (msg.bitcoin) newCurrentPrice.bitcoin = msg.bitcoin;\n      if (msg.ethereum) newCurrentPrice.ethereum = msg.ethereum;\n      if (msg.dogecoin) newCurrentPrice.dogecoin = msg.dogecoin;\n\n      this.setState({ currentPrice : newCurrentPrice });\n      // console.log('this.current price updated to ', this.state.currentPrice);\n    }.bind(this);\n\n\n    // 2. websocket listener for tesla\n\n    // const socket = new WebSocket(`wss://ws.finnhub.io?token=${token}`);\n    // socket.addEventListener('open', function (event) {\n    //   socket.send(JSON.stringify({'type':'subscribe', 'symbol': 'BINANCE:ETHUSDT'}))\n    // });\n    \n    // // Listen for messages\n    // socket.addEventListener('message', function (event) {\n    //     // console.log('Message from server ', event.data);\n    //     try {\n    //       const currPrice = JSON.parse(event.data).data[0].p;\n    //       // console.log(currPrice);\n\n    //       let newCurrentPrice = {...this.state.currentPrice};\n    //       newCurrentPrice.tesla = currPrice;\n    //       this.setState({ currentPrice: newCurrentPrice });\n    //     }\n    //     catch(err) {\n    //       console.log(\"err in parsing tesla websocket curr price\", err);\n    //     }\n    // }.bind(this));\n\n  }\n\n  getCurrentPrice = () => {\n    return this.state.currentPrice;\n  }\n  \n  updatePrevCompletedOrders = async () => {\n\n    // console.log(\"got data when updatePrevOrder\", this.state);\n\n    const { newBalance, newHolding, newSortedHolding, updatedAllOrders } = await executePrevCompletedOrders(\n      this.state.allOrders,\n      this.state.balance,\n      this.state.holding,\n      this.state.sortedHolding,\n      this.getCurrentPrice\n    );\n\n    console.log(newBalance, newHolding, newSortedHolding, updatedAllOrders);\n    this.setState({balance: newBalance, holding: newHolding, sortedHolding:newSortedHolding, allOrders: updatedAllOrders});\n  }\n\n\n  // called by the child class BuySell whenever user clicks on buy,sort or sell\n  placeOrder = (order) => {\n    // update totalAsset, holding, allOrders\n    console.log(\"order got at Home.js\", order);\n\n    //   // for testing only\n    // if (order === null) {\n    //   console.log(\"updating order to default\");\n    //   order = {\n    //     symbol: \"BINANCE:BTCUSDT\",\n    //     coinSelectedName: \"bitcoin\",\n    //     type: \"sortNow\",\n    //     amount: 5000,\n    //     coinBought: 5000/this.state.currentPrice[\"bitcoin\"],\n    //     // executeWhenPriceAt: null, //\n    //     orderCompleted: true,\n    //   };\n    // }\n    \n    if(this.state.currentPrice[order.coinSelectedName] === null) {\n      showToastError(`Order can't be placed websocket is not ready yet for the stock: ${order.coinSelectedName}`);\n      return;\n    }\n\n    order.priceWhenOrderWasPlaced = Number(this.state.currentPrice[order.coinSelectedName]);\n\n    switch (order.type) {\n      case \"buyNow\": {\n        order.coinBought = order.amount/this.state.currentPrice[order.coinSelectedName];\n        const { success, newBalance, newHolding } = handleBuyNow(\n          this.state.balance,\n          this.state.holding,\n          order,\n          this.state.currentPrice\n        );\n        if(!success)  return;\n        this.setState({ balance: newBalance, holding: newHolding });\n        break;\n      }\n\n      case \"sortNow\": {\n        order.coinBought = order.amount/this.state.currentPrice[order.coinSelectedName];\n        const { success, newBalance, newSortedHolding } = handleSortNow(\n          this.state.balance,\n          this.state.sortedHolding,\n          order,\n          this.state.currentPrice\n        );\n        if(!success)  return;\n        this.setState({ balance: newBalance, sortedHolding: newSortedHolding });\n        break;\n      }\n\n      case \"sellNow\": {\n        const { success, newBalance, newHolding } = handleSellNow(\n          this.state.balance,\n          this.state.holding,\n          this.state.sortedHolding,\n          order,\n          this.state.currentPrice\n        );\n        if(!success)  return;\n        this.setState({ balance: newBalance, holding: newHolding });\n        break;\n      }\n\n      case \"buyAt\":\n        showToastSuccess(`Your buy order has been placed, it will be automatically executed when the price will reach $${numberWithCommas(order.executeWhenPriceAt)}`);\n        break;\n\n      case \"sortAt\":\n        showToastSuccess(`Your sort order has been placed, it will be automatically executed when the price will reach $${numberWithCommas(order.executeWhenPriceAt)}`);\n        break;\n\n      case \"sellAt\":\n        showToastSuccess(`Your sell order has been placed, it will be automatically executed when the price will reach $${numberWithCommas(order.executeWhenPriceAt)}`);\n        break;\n\n      case \"sellSortNow\": {\n        const { success, newBalance, newSortedHolding } = handleSellSortNow(\n          this.state.balance,\n          this.state.sortedHolding,\n          order,\n          this.state.currentPrice\n        );\n        if(!success)  return;\n        this.setState({ balance: newBalance, sortedHolding: newSortedHolding });\n        break;\n    }\n        \n      case \"sellSortAt\": \n        showToastWarn('Sell Sort At is yet to be properly implemented!');\n        break;\n\n      default:\n        console.log(\"Wrong Order type\");\n        return;\n    }\n\n    let newAllOrders = this.state.allOrders.slice();\n    let tempOrder = {...order};\n    console.log(\"tempORder\", tempOrder);\n    tempOrder.time = Date.now();\n    newAllOrders.push(tempOrder);\n    // console.log(\"new orer\", newAllOrders);\n    this.setState({ allOrders: newAllOrders });\n\n    console.log(\"order that was added: \", tempOrder);\n  };\n\n  remove = () => {\n    console.log(\"pressed reset\");\n    localStorage.clear();\n    this.setState({\n      lastTotalAssetChange: 'none',\n      totalAssetAmt: 10000,\n      balance: 10000,\n      holding: {},\n      sortedHolding: {},\n      allOrders: []\n    });\n    showToastSuccess(`All orders has been cleared`)\n  };\n  \n  render() {\n    return (\n      <div className=\"Home\">\n        <HeaderComp />\n        <div className=\"Content\">\n          <Widget coinSelectedName={this.state.coinSelectedName} />\n          <BuySell\n            totalAssetAmt={this.state.totalAssetAmt}\n            balance={this.state.balance}\n            holding={this.state.holding}\n            sortedHolding={this.state.sortedHolding}\n            lastTotalAssetChange={this.state.lastTotalAssetChange}\n            placeOrder={this.placeOrder}\n            currentPrice={this.state.currentPrice}\n            coinSelectedName={this.state.coinSelectedName}\n            onChange={(value) => this.setState({ coinSelectedName: value })}\n          />\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"flex-end\",\n            paddingBottom: \"20px\",\n            paddingRight: \"30px\",\n          }}\n        >\n          <h1 style={{ textAlign: \"center\", paddingRight: \"500px\" }}>\n            Order Table\n          </h1>\n          <button className=\"button\" onClick={this.remove}>\n            <span>Reset</span>\n          </button>\n        </div>\n        <div className=\"Content\">\n          <OrderTable\n            allOrders={this.state.allOrders}\n            getCurrentPrice={this.getCurrentPrice}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport { Link, BrowserRouter as Router } from \"react-router-dom\";\nimport axios from \"axios\";\nimport HeaderComp from \"../Home/HeaderComp\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Login.css\";\n\nfunction Login(props) {\n  let navigate = useNavigate();\n\n  const [emailLog, setEmailLog] = useState(\"\");\n  const [passwordLog, setPasswordLog] = useState(\"\");\n  const [stateId, setStateId] = useState(\"\");\n  const [data, setData] = useState(null);\n\n  // To make a Login HTTP Request\n  const login = async () => {\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      charset: \"UTF-8\",\n    };\n    console.log(\"Reached login\");\n    const res = await axios({\n      method: \"POST\",\n      data: {\n        email: emailLog,\n        password: passwordLog,\n      },\n      headers: { headers },\n      withCredentials: true,\n      url: \"/user/login\",\n    });\n\n    // console.log(\"User id in Login \" + res.data.user.id);\n\n    if(res.data.success) {\n      console.log(\"login success user data: \", res.data.user);\n\n       setStateId(res.data.user.id);\n\n       console.log(\"ejifwef\" + stateId);\n       \n       var data = {\n         email: emailLog,\n         password: passwordLog,\n         id: res.data.user.id,\n       };\n\n       const resOrders = await axios({\n         method: \"POST\",\n         data: data,\n         headers: { headers },\n         withCredentials: true,\n         url: \"/user/userOrder\",\n       });\n\n       if (resOrders.data.success) {\n         console.log(\"resOrders Response \" + JSON.stringify(resOrders.data.userData));\n       }\n\n      // save session to local storage\n       let dataFromUser = res.data.user;\n       let dataFromUserData = resOrders.data.userData[0];\n       \n       let user = {\n         ...dataFromUser , ...dataFromUserData\n       };\n      window.localStorage.setItem(\"userData\", JSON.stringify(dataFromUserData));\n      // redirect to /\n      window.location.href = '/'; //relative to domain\n\n    }\n    \n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(emailLog,passwordLog);\n  };\n\n  // let loginStatus = true;\n  const validateUser = () => {\n    //To check if a user is logged in or not.\n  };\n\n  return (\n    <div className=\"card\">\n      <HeaderComp />\n      <div className=\"center\">\n        <h1>Login</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"txt_field\">\n            <input\n              type=\"text\"\n              required\n              onChange={(e) => {\n                setEmailLog(e.target.value);\n              }}\n            />\n            <span></span>\n            <label>Email</label>\n          </div>\n          <div className=\"txt_field\">\n            <input\n              type=\"password\"\n              required\n              onChange={(e) => {\n                setPasswordLog(e.target.value);\n              }}\n            />\n            <span></span>\n            <label>Password</label>\n          </div>\n          <div className=\"pass\" onClick={validateUser}>\n            Forgot Password?\n          </div>\n\n          <input type=\"submit\" value=\"Login\" onClick={login} />\n\n          <div className=\"signup_link\">\n            Not a member?\n            <Link to=\"/register\">Signup</Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, BrowserRouter as Router } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Register.css\";\n\nfunction Register(props) {\n  let navigate = useNavigate();\n\n  const [nameReg, setNameReg] = useState(\"\");\n  const [emailReg, setEmailReg] = useState(\"\");\n  const [passwordReg, setPasswordReg] = useState(\"\");\n\n  // To make a register HTTP Request\n  const register = async () => {\n    console.log(\"going to post\");\n\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      charset: \"UTF-8\",\n    };\n\n    const res = await axios({\n      method: \"POST\",\n      data: {\n        name: nameReg,\n        email: emailReg,\n        password: passwordReg,\n      },\n      headers: { headers },\n      withCredentials: true,\n      url: \"/user/register\",\n    });\n    console.log(\"after await res \", res);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(nameReg, emailReg, passwordReg);\n  };\n\n\n\n  return (\n    <div className=\"card\">\n      <div className=\"center\">\n        <h1>Register</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"txt_field\">\n            <input\n              type=\"text\"\n              required\n              onChange={(e) => {\n                setNameReg(e.target.value);\n              }}\n            />\n            <span></span>\n            <label>Name</label>\n          </div>\n\n          <div className=\"txt_field\">\n            <input\n              type=\"email\"\n              required\n              onChange={(e) => {\n                setEmailReg(e.target.value);\n              }}\n            />\n            <span></span>\n            <label>Email</label>\n          </div>\n          <div className=\"txt_field\">\n            <input\n              type=\"password\"\n              required\n              onChange={(e) => {\n                setPasswordReg(e.target.value);\n              }}\n            />\n            <span></span>\n            <label>Password</label>\n          </div>\n          <div className=\"pass\" onClick={handleSubmit}>\n            Forgot Password?\n          </div>\n          <input type=\"submit\" value=\"Register\" onClick={register} />\n          <div className=\"signup_link\">\n            Already a member?\n            <Link to=\"/login\">Login</Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Register;\n","import React, { useState } from 'react';\nimport {Route , Routes , BrowserRouter as Router} from \"react-router-dom\";\nimport Home from './components/Home/Home'\nimport Login from './components/Login/Login'\nimport Register from './components/Register/Register'\nimport './App.css';\n\nfunction App() {\n  \n  const [loggedInStatus, setloggedInStatus] = useState(false);\n  const [user, setCount] = useState({});\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <Routes>\n        <Route exact path=\"/login\" \n        element={<Login />}/>\n        <Route exact path=\"/register\" \n        element={<Register />}/>\n        <Route exact path=\"/\" element={<Home />} />\n      </Routes>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","const nameTradingviewSybmol = {\n    bitcoin: 'BINANCE:BTCUSDT', \n    ethereum: 'BINANCE:ETHUSDT', \n    dogecoin: 'BINANCE:DOGEUSDT',\n    tesla: 'NASDAQ:TSLA',\n     \n}\n\nconst convertNameToTradingviewSybmol = (name) => {\n    \n    const sybmol = nameTradingviewSybmol[name];\n    if(!Symbol) {\n        throw new Error(\"The selected name doesnt have a Tradingview sybmol!!\");\n    }\n    return sybmol;\n}\n\nmodule.exports = {\n    nameTradingviewSybmol,\n    convertNameToTradingviewSybmol,\n}","const numberWithCommas = (x) => {\n    return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nmodule.exports = {\n    numberWithCommas,\n}"],"sourceRoot":""}